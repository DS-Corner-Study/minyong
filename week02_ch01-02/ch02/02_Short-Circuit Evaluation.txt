[단락 평가]

- 단락 평가(Short-Circuit Evaluation)(=지름길 평가): 논리 연산에서 첫 번째 피연산자의 값만으로 해당 식의 결과가 확실할 때, 두 번째 값은 평가하지 않는 것.
- true || false와 같은 비교식은 첫 번째 피연산자의 값이 true이므로 두 번째 피연산자의 값이 무엇이든 연산 결과는 true
- false && true와 같은 식은 첫 번째 피연산자의 값이 false이므로 두 번째 피연산자가 무엇이든 연산 결과는 false
- 단락 평가에는 AND와 OR 논리 연산자의 특징을 이용하는 두 가지 방식이 있음.

1. [AND 단락평가]

    - AND를 의미하는 && 연산자는 피연사자의 값이 하나라도 거짓이면 거짓을 반환.
    - 왼쪽에 위치한 첫 번째 피연산자의 값이 flase면, 단락 평가 -> 두 번째 피연산자는 계산 x.

    function calcA() {
        console.log("a"); // 출력: a
        return false;
    }
    function calcB() { // <- 호출되지 않음
        console.log("b"); 
        return true;
    }
    console.log(calcA() && calcB()); // 출력: false
    - 첫 번째 피연사 함수 calcA의 반환값이 거짓이므로 두 번째 피연산자는 계산x -> 함수 calcB는 호출x -> 콘솔에 b가 출력되지 x



    < AND 단락 평가를 이용해 오류 방지하기 >

    - 단락 평가는 불리언이 아닌 truthy & falsy한 값을 사용할 때도 적용 가능

    function calcA() {
        console.log("a"); // 출력: a
        return undefined;
    }
    function calcB() {
        console.log("b");
        return true;
    }
    console.log(calcA() && calcB()); // 출력: undefiend
    - AND 논리 연산의 결과가 true나 false가 아니라 undefined인 이유는 논리 연산에 참여한 피연산자의 값이 불리언 값이 아니기 때문.
    - AND나 OR 논리 연산은 피연산자의 값이 truthy 또는 falsy하면 해당값을 그대로 반환.
    - 함수 calcA가 falsy한 값인 undefined를 반환하므로, 이 값이 그대로 논리 연산의 결괏값이 됨.
    

    + /이런 특징을 이용하면 오류를 방지하는 데 도움 됨./


    function getName(person) { 
        return person.name; // TypeError: undefined에서 프로퍼티를 읽을 수 없다.
    }
    let person;
    let name = getName(person); 
    console.log(name);
    - 함수 getName은 매개변수 person에 저장한 값이 객체일 것으로 예상. but, person에 실제로 저장한 값은 undefined -> undefined 값에 객체의 점 표기법으로 접근하므로 프로퍼티를 읽을 수 없다는 오류 메시지를 출력.


    + /조건문으로 오류 방지/


    function getName(person) {
        if (person !== undefined) { ①
                return person.name;
        } else {
                return "매개변수가 객체가 아닙니다."; // 출력: 매개변수나 객체가 아닙니다.
        }
    }
    let person;
    let name = getName(person);
    console.log(name);
    - 매개변수 person의 값이 undefined가 아닐 때만 name 프로퍼티에 접근.
    

    + /함수 getName에 전달하는 인수가 null일 때에도 오류 발생 가능/


     function getName(person) {
        if (person !== undefined) { // ①
                return person.name; // TypeError: null에서 프로퍼티를 읽을 수 없다.
        } else {
            return "매개변수가 객체가 아닙니다";
        }
    }
    let person = null;
    let name = getName(person);
    console.log(name);
    - 매개변수 person의 값이 null이므로 조건을 만족하여 name 프로퍼티에 접근
    - 함수 getName의 인수로 null 값을 전달 -> 조건문은 만족 but, null 값에 객체의 점 표기법을 사용해 접근하면 오류 발생


    + /조건문에서 위 오류를 방지하려면 다음과 같이 수정/


    function getName(person) {
        if (person !== undefined && person !== null) { ①
            return person.name;
        } else {
            return "매개변수가 객체가 아닙니다."; // 출력: 매개변수가 객체가 아닙니다.
        }
    }
    let person = null;
    let name = getName(person);
    console.log(name);
    - 매개변수 person의 값이 undefined나 null이 아닐 때에만 name 프로퍼티에 접근.
    - 일단 문제는 해결 but, 자바스크립트로 프로그래밍을 하다 보면 객체를 매개변수에 저장해 사용하는 일이 많음. 그럴 때마다 오류를 방지하기 위해 복잡한 조건문을 작성하는 것은 그다지 효율적이지 않음.


    + /'단락 평가'를 이용하면 이 문제를 해결 가능/


    function getName(person) {
        return person && person.name;
    }
    let person = { name: "정민주" };
    let name1 = getName(undefined); // undefined
    let name2 = getName(null); // null
    let name3 = getName(person); // 정민주
    console.log(name1);
    console.log(name2);
    console.log(name3);
    - 매개변수 person의 값이 false 또는 falsy한 값이라면 단락 평가를 수행
    - 함수 getName의 매개변수 person이 undefined, null과 같은 falsy한 값이라면, person.name을 계산하지 않으므로 이제는 유사 오류가 발생하지 x



2. [OR 단락평가]
    - OR 연산을 의미하는 || 연산자는 피연산자의 값이 하나라도 참이면 참을 반환. -> 왼쪽에 위치한 첫 번째 피연산자의 값이 true면, 단락 평가가 이루어져 두 번째 피연산자 값은 계산하지 x.

    function calcA() {
        console.log("a"); //출력: a
        return true;
    }
    function calcB() {
        console.log("b"); 
        return false;
    }
    console.log(calcA() || calcB()); //출력: true
    - 첫 번째 피연산자인 함수 calcA의 반환값이 참 -> 두 번째 피연산자의 값은 계산하지x -> 함수 calcB는 호출되지x.


    - AND처럼 OR 단락 평가 역시 불리언이 아닌 truthy & falsy한 값을 사용할 때도 적용 가능.

    const name = "정민주" || undefined;
    console.log(name); // 출력: 정민주
    - "정민주"는 truty한 값 -> 두 번째 피연산자 계산 x -> name에 "정민주"가 저장.



    < OR 단락 평가와 null 병합 연산자 >

    -  OR(||) 연산자를 이용한 단락 평가와 null 병합 연산자의 차이점.

    const varA = 0;
    const varB = "이정환";
    const resultA = varA || varB; // ①
    const resultB = varA ?? varB; // ②
    console.log(resultA); // 이정환
    console.log(resultB); // 0
    - varA는 falsy한 값, varB는 truthy한 값이기 때문에 || 연산의 결과 varB의 값인 “이정환”을 resultA에 저장.
    - varA와 varB에서 첫 번째로 확정된 값은 varA의 0 -> 이 값을 resultB에 저장


    - ||의 단락 평가는 null 병합 연산자와 유사한 듯 보이지만 혼동해서는 x
    - null 병합 연산자는 값이 null이나 undefined가 아닌 피연산자를 찾음 -> truthy와 falsy로 동작하는 || 연산자와는 엄밀히 다른 동작을 수행.