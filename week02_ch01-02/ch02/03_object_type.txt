[객체 자료형 자세히 살펴보기]
- 자바스크리브에서 원시 자료형을 제외한 모든 자료형은 객체 자료형. 배열과 함수는 객체 자료형. 
- 자바스크립트는 다른 언어와 달리 배열과 함수를 사용할 때 주의할 점 있음.

1. [배열과 함수가 객체인 이유]
    - 자바스크립트의 자료형은 원시 자료형과 객체 자료형으로 구분 -> 원시 자료형을 제외한 모든 자료형(배열과 함수 포함)은 객체 자료형
    - 배열은 인덱스로 연속적인 값을 저장하는 데 특화된 자료형
    - 자바스크립트의 배열은 객체 자료형에 몇 가지 기능을 추가해 다른 언어의 배열처럼 동작하는 특수한 객체라 할 수 있음 
      -> 자바스크립트의 배열에는 일반 객체에 있는 프로퍼티와 메서드가 있음.

    - ex: 자바스크립트의 배열에는 길이를 나타내는 length 프로퍼티가 있음.

    const arr1 = [1, 2, 3];
    console.log(arr1.length); // 3
    const arr2 = [1, 2, 3, 4];
    console.log(arr2.length); // 4    


    - ex2: 배열은 객체이므로 배열 조작을 위한 메서드가 있음.

    const arr = [1, 2, 3];
    arr.push(4);
    console.log(arr); // [1, 2, 3, 4]
    - push 메서드는 배열 마지막 요소 뒤에 값을 추가하는 메서드


    - 자바스크립트의 함수 또한 객체. 함수는 값으로 취급 -> 함수를 값으로 저장하는 함수 표현식이 가능하고, 다른 함수에 인수로 전달 가능
    
    - ex3: 함수에도 함수의 이름을 저장하는 name 프로퍼티가 있음. (배열에 length 프로퍼티가 있듯이)

    function myFunction() {
        console.log("hi");
    }
    console.log(myFunction.name); // myFunction
    - 함수의 name 프로퍼티는 해당 함수의 이름을 저장



2. [객체와 참조]

    - 원시 자료형은 하나의 값을 저장 but, 함수와 배열 같은 객체 자료형은 여러 개의 값을 저장.
    - 원시 자료형은 값을 크기가 일정한 공간에 저장 but, 객체 자료형은 값이 동적으로 늘어나거나 줄어들기 때문에 일정한 크기의 공간에 저장 불가.
    - 객체 자료형은 값의 크기가 유동적으로 변하기 때문에 자바스크립트는 참조라는 기능을 이용.
    - 참조(Reference): 실제로 값을 저장하는 것이 아니라 값을 저장한 곳의 주소만 저장하는 방식.


    - < 원시 자료형과 객체 자료형의 저장 방식 비교 >
    
    - 원시 자료형: 값을 변수에 저장할 때 값 그대로 저장.
    - 객체 자료형(=참조 자료형): 객체가 메모리 어딘가에 저장되고 변수가 객체를 참조할 수 있는 주솟값(=참좃값)을 저장.

    - ex4: 객체를 복사하는 경우

    let person = {
        name: "이정환"
    };
    let man = person;
    - 변수에는 참좃값이 저장되고 실제 객체의 값은 복사되지 않음. 
    - 즉, 두 변수는 동일한 참좃값을 가지며, 하나의 객체를 동시에 참조하는 형태가 됨.

    - ex5

    let person = {
        name: "이정환"
    };
    let man = person;
    man.age = 25;
    console.log(person); // {name: "이정환", age: 25}
    console.log(man);// {name: "이정환", age: 25}
    - 변수 man에 저장한 객체에 새 프로 퍼티를 추가하고, person과 man 둘 다 출력하면 동일한 결과 나옴.
    - 변수 man과 person이 참조하는 객체가 같기 때문.


    - 객체 자료형은 원시 자료형과 다르게 참조 형식으로 변수 저장


    - < 참조에 의한 비교 >
    
    - 객체 자료형은 원시 자료형과 저장 방식이 다르기 때문에 값을 비교하는 방법도 다름.

    - ex6: 동일한 값을 원시 자료형으로 저장한 두 변수를 비교하는 경우

    let numA = 1;
    let numB = 1;
    console.log(numA === numB); // true
    - 변수 numA와 numb에 저장한 값은 값도 자료형도 모두 같음 -> 비교 결과는 참.


    - ex7: 동일한 값을 객체 자료형으로 저장한 두 변수를 비교한 경우

    let person = {
        name: "이정환"
    };
    let man = {
        name: "이정환"
    };
    console.log(person === man); // false
    - 변수 person과 man에 저장한 객체는 서로 완벽하게 같음. but, 두 값을 비교하면 false를 반환
    - 객체 자료형을 비교할 때는 값이 아닌 참좃값을 비교하기 때문.
    - 객체는 생성될 때 고유한 참좃값을 가짐. 변수 person과 man에 저장된 참좃값은 서로 다름 -> 객체 person과 man은 내부적으로는 값이 같지만 각각 별개의 객체.


    - 참조에 의한 비교: 객체를 비교할 때는 값이 아닌 참좃값을 비교.
    
    - 배열이나 함수도 객체이므로 동일한 결과 나타남.
    
    - ex8
    let arr1 = [1, 2, 3];
    let arr2 = [1, 2, 3];
    console.log(arr1 === arr2); // false
    - 변수 arr1과 arr2에 저장한 배열은 값은 같지만 서로 다른 객체 -> 참좃값을 비교하므로 결과는 거짓.

    - ex9
    let func1 = () => {
        console.log("func");
    };
    let func2 = () => {
        console.log("func");
    };
    console.log(func1 === func2); // false
    - 변수 func1과 func2에 저장한 함수는 내부 동작은 같지만 서로 다른 객체 -> 참좃값이 다르므로 결과는 거짓.
    - 이 예제는 화살표 함수를 서로 비교했지만 함수 선언식으로 만든 함수의 결과도 동일.

