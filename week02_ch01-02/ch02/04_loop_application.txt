[반복문 응용하기]

- 반복문을 이용하면 배열과 객체에 저장한 값에 쉽게 접근할 수 있음.


1. [배열과 반복문]

    - 배열은 순서대로 데이터를 저장하는 특징 -> 웹 서비스 게시판이나 피드의 게시물 리스트를 생성할 때 반복문과 결합해 자주 사용.



    - < 인덱스를 이용한 순회 >

    - 배열에는 데이터의 저장 순서를 의미하는 인덱스가 있음.
    - 인덱스를 0부터 1씩 증가하며 차례대로 데이터에 접근하면 배열의 모든 요소에 접근 가능.

    let arr = [1, 2, 3, 4];
    for (let idx = 0; idx < 4; idx++) {
        console.log(arr[idx]);
    }
    // 1
    // 2
    // 3
    // 4


    - 배열의 길이가 고정적이고 프로그램을 실행하는 과정에서 변경되지 않는다면, 배열의 길이를 명시적으로 작성 가능.
    - but 자바스크립트의 배열은 저장 요소의 개수에 따라 길이가 자동으로 늘어나고 줄어드는 동적인 특징이 있음 -> 프로그램을 실행하는 과정에서 배열의 길이를 가늠 하기가 어려움.
      -> 프로퍼티 length를 이용하면 쉽게 배열의 현재 길이를 알아낼 수 있음.

    let arr = [1, 2, 3, 4];
    const len = arr.length; 
    console.log(len); // 4

    - 프로퍼티 length로 배열의 현재 길이를 알 수 있으므로, 더 안전하게 for 문과 결합해 사용.

    let food = ["짜장면", "피자", "치킨"];
    for (let i = 0; i < food.length; i++) {
        console.log(food[i]);
    }
    // 짜장면
    // 피자
    // 치킨
    - 프로퍼티 length로 for 문의 조건식을 작성하면, 배열의 길이가 변동되어도 종료 조건에 맞게 배열 요소에 접근.
    - food.length가 3이므로 for 문은 인덱스 번호가 0, 1, 2일 때까지 순회.


    - for 문과 프로퍼티 length를 이용해 배열을 순회할 때주의할 점: 프로퍼티 length는 배열의 길이를 반환할 뿐, 마지막 인덱스 번호는 반환하지 x
     -> 자바스크립트에서 인덱스는 항상 0부터 시작하므로 마지막 요소의 인덱스는 배열의 길이보다 1 작음 -> 반복문의 종료 조건은 i <= food.length가 아니라 "i < food.length"로 설정.



    - < for...of 문을 이용한 순회 >

    - 프로퍼티 length를 사용하지 않고 배열을 순회하는 방법.
    - for 문의 특수한 형태인 for...of 문은 배열을 더 간결하게 순회.

    let food = ["짜장면", "피자", "치킨"];
    for (let item of food) {
        console.log(item);
    }
    // 짜장면
    // 피자
    // 치킨


    - for...of 문은 for 문과 달리 of 뒤의 배열에서 요소를 하나씩 순서대로 꺼내 변수 item에 저장.
    - for...of 문을 이용하면 인덱스를 이용한 방식보다 더 간결하게 배열을 순회.




2. [객체와 반복문]
    - 반복문을 이용해 객체에 저장된 프로퍼티를 순회하는 방법.


    - < Object.keys를 이용한 key 순회 >

    - 객체 메서드인 Object.keys는 객체 프로퍼티의 key를 배열로 반환.

    let person = {
        name: "이정환",
        age: 25,
        location: "경기도"
    };
    const keyArr = Object.keys(person);
    console.log(keyArr); // ["name", "age", "location"]

    - Object.keys 메서드는 인수로 전달한 객체에서 프로퍼티의 key만 배열로 만들어 반환.
    - 이렇게 만든 key 배열을 for...of 문으로 순회.

    let person = {
        name: "이정환",
        age: 25,
        location: "경기도"
    };
    const keyArr = Object.keys(person); 
    for (let key of keyArr) { 
        console.log(key);
    }
    // name
    // age
    // location
    - Object.keys 메서드는 인수로 전달한 객체에서 프로퍼티의 key만을 배열로 반환. 
    - for...of 문으로 배열 keyArr를 순회하며 가져온 해당 key를 출력.


    - 괄호 표기법으로 프로퍼티의 key뿐만 아니라 value도 가능.

    let person = {
        name: "이정환",
        age: 25,
        location: "경기도"
    };
    const keyArr = Object.keys(person);
    for (let key of keyArr) {
        let value = person[key]; 
        console.log(key, value);
    }
    // name 이정환
    // age 25
    // location 경기도
    - 괄호 표기법으로 현재 key 프로퍼티의 value를 하나씩 불러옴.



    - < Object.values를 이용한 value 순회 >

    - 프로퍼티의 value만 배열로 반환하는 Object.values 메서드.

    - 이번에는 Object.values 메서드로 객체 프로퍼티의 value만 불러옴.

    let person = {
        name: "이정환",
        age: 25,
        location: "경기도"  
    };
    const valueArr = Object.values(person); ①
    for (let value of valueArr) {
        console.log(value);
    }
    // 이정환
    // 25
    // 경기도
    - Object.values 메서드는 인수로 전달한 객체에서 프로퍼티의 value만을 배열로 반환.



    - < for...in 문을 이용한 순회>

    - 배열을 순회할 때의 for...of 문처럼, 객체를 순회할 때는 for...in 문을 사용.
    - for...in 문으로 객체를 순회하면, for 문보다 더 간결한 코드를 작성 가능.

    let person = {
        name: "이정환",
        age: 25,
        location: "경기도"
    };
    for (let key in person) {
        const value = person[key];
        console.log(key, value);
    }
    // name 이정환
    // age 25
    // location 경기도
    - for...in 문은 in 오른쪽에 있는 객체에서 프로퍼티의 key를 하나씩 순서대로 변수 key에 저장. 
    - 즉, 객체 프로퍼티의 key를 순회


    - for...in 문을 사용하면 Object.keys 메서드보다 더 간단하게 객체를 순회.