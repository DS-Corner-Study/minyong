[스코프]
스코프: 자바스크립트의 변수와 함수가 생성과 동시에 자신에게 접근하거나 호출할 때 일정한 제약 범위를 갖는 것.
      -> 즉, 변수나 함수에 접근하거나 호출할 수 있는 범위를 뜻함.

1. [전역, 지역 스코프]
    - 전역 스코프: 코드 어디에서나 접근 가능
    - 지역 스코드: 특정 영역에서만 접근 가능


    - ex: 함수 외부에 선언한 변수를 함수 내부에서 접근하는 경우

    let a = 1;
    function foo() {
        console.log(a);
    }
    function bar() {
        console.log(a);
    }
    foo(); // 출력: 1 
    bar(); // 출력:1 
    console.log(a); // 출력: 1 
    - 변수 a는 조건문이나 반복문, 함수의 중괄호 내부에서 선언 x -> 변수 a는 전역 스코프를 가짐 -> 코드 어디엥서나 이 변수에 접근 가능


    - 전역 변수(Global Variable): 전역 스코프를 갖는 변수


    - ex2: 함수 내부에 변수를 선언하고 함수 외부에서 그 변수에 접근하는 경우

    function foo() {
        let a = 1; 
    }
    console.log(a); // 오류: a는 정의되지 않았습니다.
    - 변수 a는 함수 내부에 선언됨 -> 지역 스코를 가짐 -> 변수를 선언한 함수 내부에서만 접근 가능


    - 지역 변수(Local variable): 지역 스코프를 갖는 변수
    - 변수의 스코프: 자바스크립트의 변수가 선언한 위치에 따라 접근할 수 있는 범위가 결정되는 것.


    - ex3: 조건문 내부에 변수를 선언하고 해당 변수를 조건문 외부에서 접근하는 경우

    if (true) {
        let a = 1; 
    }
    console.log(a); // 오류: a는 정의되지 않았습니다.


    - ex4: 반복문 내부에 변술를 선언하고 해당 변수를 반복문 외부에서 접근하는 경우

    for (let i = 0; i < 10; i++) {
         let a = 1; 
    }
    console.log(a); // 오류: a는 정의되지 않았습니다.
    console.log(i); // 오류: i는 정의되지 않았습니다.
    - 반복문의 카운터 변수 i 또한 반복문 내부에서 선언한 변수와 동일하게 지역 스코프를 가짐 -> 반복문 외부에서 접근 불가


    - 변수가 아닌 함수도 스코프를 가짐.


    - ex5: 함수가 또 다른 함수를 호출하는 경우

    function foo() {
        console.log("foo"); // 출력: foo
    }
    function bar() {
        foo();
        console.log("bar"); // 출력: bar
    }
    bar();
    - 함수 bar 호출 -> 함수 bar에서 다시 함수 foo 호출
    - 함수 foo는 조건문이나 반복문 또는 다른 함수 내부에서 선언 x -> 전역 스코프를 가짐 -> 코드 어디에서나 호출 가능


    - ex6: 함수 내부에 중첩 함수를 만들고 함수 외부에서 이 중첩 함수를 호출하는 경우

    function foo() {
        console.log("foo");
        function bar() {
            console.log("bar");
        }
    }
    bar(); // 오류: bar는 정의되지 않았습니다.
    - 함수 bar은 중첩함수 -> 지역 스코프를 가짐 -> 함수 foo 외부에서 호출 불가


    - 중첩 함수 외에도 조건문이나 반복문 내부에 선언한 함수도 지역 스코프를 가짐.'


    - ex7: 조건문 내부에 함수를 선언하고 해당 함수를 조건문 외부에서 호출하는 경우

    if (true) {
        function foo() {
            console.log("bar");
        }
    }
    foo(); // 오류: foo는 정의되지 않았습니다.

    
    - ex8: 반복문 내부에서 함수를 선언하고 해당 함수를 반복문 외부에서 호출하는 경우

    for (let i = 1; i < 10; i++) {
        function bar() {
            console.log("bar");
        }
    }
    bar(); // 오류: bar는 정의되지 않았습니다.



2. [블록, 함수 스코프]
    - 블록(Block): 중괄호로 둘러싸인 부분
    - 자바스크립트의 변수나 함수는 블록을 기준으로 지역 스코프가 결정됨.
    - 블록 스코프(Block scope): 블록 기준으로 지역 스코프를 정함. 블록 내부에서 선언한 변수가 갖는 스코프. let이나 const 키워드로 선언한 변수.
    - 함수 스코프(Fucntion scope): 함수를 기준으로 지역 스코프를 정함. 함수 내부에서 선언한 변수가 갖는 스코프. var 키워드로 선언한 변수.
    

    - ex: 조건문 내부에서 var로 변수를 선언한 경우

    if (true) {
        var a = 1;
    }
    console.log(a); // 출력: 1
    - var로 선언한 변수는 함수 스코프를 가짐 -> 조건문 내부에서 선언했으나 조건문 외부에서 접근 가능
    - 함수 스코프를 갖는다는 것은 함수 내부에서 선언한 변수만 지역 스코프를 갖는다는 의미 -> 함수가 아닌 조건문의 블록 내부에서 선언한 변수 a는 전역 스코프를 가짐.


    - ex2: 함수 내부에서 var로 변수를 선언한 경우

    function foo() {
        var a = 1;
    }
    console.log(a); // 오류: a는 정의되지 않았습니다.
    - var로 선언한 변수는 함수 스코프를 가짐 -> 함수 foo 내부에서 선언 -> 외부에서 a에 접근 시 오류 발생


    - var은 대다수 프로그래밍 언어에서는 잘 쓰지 않는 함수 스코프를 가짐. var를 사용하면 변수의 이름을 중복해 사용해도 아무런 문제가 발생하지 x. -> 프로그래머를 혼란에 빠뜨릴 수 있음 -> 보다 보편적인 let이나 const 키워드를 이용해 변수를 선언할 것을 권장.

