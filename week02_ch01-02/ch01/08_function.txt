[함수]

1. [함수 선언]
    fuction 함수 이름 (매개변수) {
        함수가 수행하는 명령
    }


    - 'function'이라는 키워드 사용해 함수 선언



2. [함수 호출]
    fuction greeting() {
        console.log("hello");
    }
    greeting(); //앞서 선언한 'greeting'이라는 함수 호출



3. [함수의 인수와 매개변수]
    - 함수 호출 시 값을 주고받기 위해 필요
    - 인수: 함수를 호출 하면서 넘겨주는 값
    - 매개변수: 그 값을 저장할 변수


    function getArea(width, height) { //받은 인수를 width, height라는 매개변수에 저장
        let area = width * height;
        console.log(area);
    }
    getArea(10, 20); //인수 전달



4. [함수 반환]
    - return 문으로 수행한 결과 반환
    - 함수 내에서 더 동작할 코드가 남았더라도 return 문을 만나면 함수는 종료


    function getArea(width, height) {
        let area = width * height;
        return area;
    }
    let result = getArea(10, 20);
    console.log(result);



5. [중첩 함수]
    - 자바스크립트는 함수 내에 또 다른 함수 선언 가능
    - 중첩 함수: 특정 함수 내부에서 선언된 함수
    - 단점: 가독성을 헤침
    - 장점: 적절히 활용 시 함수 내에서 서로 역할 분담 가능 -> 중복 코드 방지


    function greeting() {
        function greetingWithName(name) {
            console.log('hello! ${name}'); //이름을 전달받아 템플릿 리터럴을 이용해 인사말 출력
        }
        let name = "정민주";
        greetingWithName(name);
    }
    greeting(); 



6. [함수와 호이스팅]
    - 호이스팅(hoisting): 프로그램에서 변수나 함수를 호출하거나 접근하는 코드가 함수 선언 코드보다 위에 있으메도 불구하고, 마치 선언 코드가 위에 있는 것처럼 동작하는 자바스크립트만의 독특한 기능
    - why?: 자바스크립트의 내부 알고리즘때문. 자바스크림트는 코드 실행 전 준비 단계를 거침. 준비 단계에서 중첩 함수가 아닌 함수들은 모두 찾아 미리 생성해둠. 따라서 함수 선언 코드를 호출보다 늦게 작성해도 자연스럽게 호출 가능.
    - 호이스팅은 코드 내에서 함수 선언의 위치를 강제하지 않기 때문에 더 유연한 프로그래밍 작성에 도움.


    func(); //선언하기 전에 호출해도 오류 발생 x
    function func() {
        console.log("hello");
    }
    


7.  [함수 표현식]
    - 함수 선언 외에 함수를 만드는 방법
    - 함수 표현식: 함수를 생성하고 변수에 값으로 저장하는 방법
    - 자바스크립트에서 함수를 숫자난 문자열처럼 취급 -> 변수에 함수 저장 가능
    - 변수에 함수를 저장하면 변수 이름으로 호출 가능


    let greeting = function () {
        console.log("hello");
    };
    greeting();
    - 위 함수는 변수의 이름인 greeting으로 호출하기 때문에 굳이 이름 달지 않아도 됨.
    - 익명 함수: 이름을 정의하지 않은 함수 


    function greetFunc() {
        console.log("hello");
    }
    greetFunc();
    let greeting = greetFunc;
    greeting();
    - 선언한 함수를 변수에 저장해 사용하는 예 (변수 greeting에 함수 greetFunc를 저장)
    - 함수를 변수에 저장할 때에는 함수 호출과 달리 소괄호 명시 x


    funcA(); //output: "hello"
    funcB(); //error: funcB는 정의되지 않았으며 함수가 아님.
    function funcA() {
        console.log("func A");
    }
    let funcB = function () {
        console.log("func B");
    };
    - funcA는 함수 선언으로 만들었기 때문에 호이스팅 대상 -> 함수 선언 전에도 호출 가능
    - funcB에 저장한 함수는 호이스팅 불가(함수표현식을 사용하여 저장한 함수는 선언이 아닌 '값'으로 취급하기 때문에 호이스팅 불가)



8. [콜백 함수]
    - 콜백 함수: 다른 함수의 인수(인수=값)로 전달하는 함수


    function parentFunc(callBack) { //매개변수 callback에 함수 childFunc 저장
        console.log("parent");
        callBack();
    }
    function childFunc() {
        console.log("child");
    }
    parentFunc(childFunc);
    - parentFunc을 호출 -> parentFunc은 parent를 콘솔에 출력 -> 매개변수 callback에 저장된 함수 호출 -> childFunc이 실행되어 child를 콘솔에 출력
    - 고차 함수(Higher-Order Function, HOF): 콜백 함수를 인수로 받는 함수


    - <콜백 함수가 필요한 이유?>

    - ex: 0부터 전달받은 숫자만큼 반복하는 함수
    function repeat(count) { 
    for (let idx = 0; idx < count; idx++) {
        console.log(idx + 1);
        }
    }
    repeat(5); // 1 2 3 4 5

    - if: 함수 repeat와 동일한 구조로 반복하는 반복문이지만 다른 기능이 추가적으로 필요하다면?
    function repeat(count) {
        for (let idx = 0; idx < count; idx++) {
            console.log(idx + 1);
        }
    }
    function repeatDouble(count) { 
        for (let idx = 0; idx < count; idx++) {
            console.log((idx + 1) * 2);
        }
    }
    repeatDouble(5); // 2 4 6 8 10
    - repeat 함수와 repeatDouble 함수는 동일한 기능을 갖더라도 특정 부분이 달라 새 함수를 만들게 됨 -> 중복 코드 발생
    
    - 콜백 함수 사용 시 이러한 문제 해결 가능
    function repeat(count, callBack) { 
        for (let idx = 0; idx < count; idx++) { 
            callBack(idx + 1);
        }
    }
    function origin(count) { 
        console.log(count); //// 출력 : 1 2 3 4 5
    }
    repeat(5, origin);  

    -if: repeat함수에서 반복문의 동작을 변경하고 싶다면 새 함수를 만들어 repeat의 인수로 전달
    function repeat(count, callBack) { 
        for (let idx = 0; idx < count; idx++) {
            callBack(idx + 1);
        }
    }
    function origin(count) {
        console.log(count);
    }
    function double(count) { 
        console.log(count * 2); // 출력 : 2 4 6 8 10
    }
    repeat(5, double); 
    - 함수 repeat의 반복문에서 반복할 때마다 매개변수 callback에 저장된 함수 double을 호출 -> 인수로 idx + 1을 전달 -> 2 4 6 8 10이 콘솔에 출력

    - if: 함수 repeat 내에서 또 다른 일을 하고 싶다면 새 함수를 만들고 인수로 전달해 콜백 함수를 교체하면 됨.

    - 콜백 함수를 이용하면 상황에 맞게 하나의 함수가  여러 동작을 수행하돌고 만들 수 있음.
    

    - <함수 표현식을 이용한 콜백 함수>
    function repeat(count, callBack) {
        for (let idx = 0; idx < count; idx++) {
            callBack(idx + 1);
        }
    }
    const double = function (count) { 
        console.log(count * 2); // 출력 : 2 4 6 8 10
    };
    repeat(5, double); 
    
    - if: 변수 double에 저장한 익명 함수를 다시 사용할 필요가 없는 상황 -> 익명 함수를 직접 인수 형태로 전달 가능(코드 줄일 수 있음.)
    function repeat(count, callBack) {
        for (let idx = 0; idx < count; idx++) {
            callBack(idx + 1);
        }
    }
    repeat(5, function (count) { 
        console.log(count * 2); // 출력 : 2 4 6 8 10
    });
    - 함수 repeat를 호출하면 두 번째 인수로 콜백 함수로 활용할 익명 함수를 직접 생성해 전달 -> 익명 한수는 함수 repeat의 매개변수 callback에 저장되어 repeat 내에서 호출할 수 있음.



9. [화살표 함수]
    - 화살표 함수: 익명 함수를 매우 간결하게 작성할 때 사용하는 함수 표현식의 단축 문법
    
    
    < let funcA = (매개변수) => 반환값; >

    - 화살표 함수 funcA는 다음 함수와 동일
    let funcA = function (매개변수) {
        return 반환값;
    };


    - ex: 이름을 전달받아 탬플릿 리터럴 형식으로 인사말을 반환하는 화살표 함수
    
    let greeting = (name) => `hello ${name}`;
    const greetingText = greeting("정민주");
    console.log(greetingText); // hello 정민주

    - if: 화살표 함수 본문이 여러 줄인 경우 -> 중괄호 사용
    
    let greeting = (name) => {
        let greetingText = `hello ${name}`;
        return greetingText;
    };
    console.log(greeting("정민주")); // hello 정민주
    - 다만 화살표 함수 본문에 중괄호 사용 시 함수 선언 때처럼 값을 반환할 때 return문을 써줘야 함.


    -ex2: 콜백 함수로 사용할 함수 화살표 함수로 작성
    
    let isConfirm = true;
    function confirm(onYes, onNo) {
        if (isConfirm) onYes();
        else onNo();
    }
    confirm(
        () => console.log("승인"), 
        () => console.log("거부") 
    );
    // 출력: 승인

    - 함수 confirm의 첫 번째 인수로 콘솔에 승인을 출력하는 화살표 함수 전달 -> 해당 함수는 매개변수 onYes에 저장 -> isConfirm이 true이므로 승인 출력




    