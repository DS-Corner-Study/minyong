[객체]
객체: 숫자형이나 문자형과 같은 원시 자료형과 달리 다양한 값을 담는 자료형

1. [객체 생성과 프로퍼티]
    - 자바스크립트에서 객체를 생성하는 방법은 2가지: '리터럴' 또는 '생성자' 문법 사용

    let objA = {}; // '객체 리터럴' 문법
    let objB = new Object(); // '객체 생성자' 문법
    
    - objA에 빈 중괄호를 할당해 객체 생성(객체 리터럴). 문법이 간결해 주로 이 방법으로 생성.


    - 빈 객체가 아닌 데이터가 있는 객체를 생성하려는 경우: key와 value 쌍으로 이루어진 '프로퍼티' 작성


    - ex: person이라는 데이터가 있는 객체 생성

    let person = {
        name: "정민주", 
        age: 21
    }


    - 프로퍼티: 속성이라는 뜻. 객체를 설명하는 정보. 객체는 프로퍼티를 여러 개 가질 수 있음. 각각은 콤마로 구분.
    
    
    - ex2: 프로퍼티의 key는 문자형을 사용하며 중복 사용 불가

    let person = {
        name: "정민주",
        age: 21,
        age: 30 // key가 중복되면 가장 마지막 프로퍼티만 남음.
    };

    - 프로퍼티의 value 값은 여러 자료형으로 구현 가능. key는 반드시 문자형만 사용. key는 중복해도 오류 발생x. but, 객체에 마지막에 작성한 프로퍼티만 남음.
    - 하나의 key가 하나의 프로퍼티에 해당. 보통 key 이름으로 프로퍼티를 구별.
    - if: 복수의 단어로 이루어진 key를 사용하려면 반드시 따옴표로 묶어 주어야 함.

    let person = {
        name: "정민주",
        age: 21,
        "like cat": true // key가 복수의 단어로 이루어짐 -> 따옴표로 묶음.
    }



2. [객체 프로퍼티 다루기]
    - 객체: key와 value로 이루어진 프로퍼티의 모음
    - 객체에서 프로퍼티를 찾고, 추가하고, 삭제하는 등의 모든 연산은 key를 이용해 수행



    < 프로퍼티 접근 >

    - key를 이용하면 객체의 프로퍼티에 접근 가능
    - 접근 방법은 2가지


    let person = {
        name: "정민주",
        age: 21,
        "like cat": true
    };
    const personName = person.name; // 점 표기법 
    const personAge = person["age"]; // 괄호 표기법 

    console.log(personName); // "정민주"
    console.log(personAge); // 21

    - 점 표기법: 객체 이름 뒤에 점(.)을 찍고 프로퍼티의 key를 명시해 해당 프로퍼티의 value에 접근
    - 괄호 표기법: 객체 이름 뒤에 대괄호([])를 열고, 그 안에 원하는 프로퍼티의 key를 문자열로 명시하여 해당 프로퍼티의 value에 접근



    < 프로퍼티 추가 >

    - 점 표기법과 괄호 표기법을 이용해 새로운 프로퍼티 추가 가능.

    let person = {
        name: "정민주",
        age: 21,
        like cat": true
    };
    person.gender = "female"; // 점 표기법을 이용한 프로퍼티 추가 
    person["nickname"] = "minyong"; // 괄호 표기법을 이용한 프로퍼티 추가 
    console.log(person.gender); // female
    console.log(person["nickname"]); // minyong

    - 추가하려는 프로퍼티의 key가 고정적이라면 점 표기법을 이용하는 것이 간단
    - key가 변수에 저장된 값처럼 유동적이라면 괄호 표기법을 이용.


    - ex3: key와 value가 유동적인 프로퍼티를 괄호 표기법으로 객체에 추가하는 경우

    function addProperty(obj, key, value) {
        obj[key] = value; 
    }
    let obj = {};
    addProperty(obj, "a", 1); 
    addProperty(obj, "b", 2);
    addProperty(obj, "c", 3)
    console.log(obj); // 출력: {a: 1, b: 2, c: 3}
    - 함수 addProperty를 호출하고 인수로 객체 obj와 key, value 값을 각각 전달(함수처럼 객체도 값 -> 함수를 호출할 때 인수로 전달 가능)
    - 함수 addProperty는 매개변수에 저장한 객체 obj, key, value를 이용해 괄호 표기법으로 새 프로퍼티를 추가하고
    
    - 괄호 표기법을 이용하면 좀 더 유연하게 새 프로퍼티를 생성 가능



    < 프로퍼티 수정 >

    - 프로퍼티의 value를 수정할 때에도 점 표기법이나 괄호 표기법을 이용

    - ex4: 객체의 프로퍼티 수정

    let cat = {
        name: "치삼이",
        age: 4
    };
    cat.name = "치삼";
    cat["age"] = 5;
    console.log(cat); // {name: "치삼", age: 5}



    < 프로퍼티 삭제 >

    - 프로퍼티를 삭제할 때에도 점 표기법이나 괄호 표기법을 이용. delete 사용.

    - ex5: 객체의 프로퍼티 삭제

    let cat = {
        name: "치삼이",
        age: 4
    };
    delete cat.name;
    delete cat["age"];
    console.log(cat); // 출력: {}



3. [상수 객체의 프로퍼티]
    - const로 선언한 상수는 값을 변경할 수 없음.

    - 상수로 선언한 객체도 프로퍼티를 추가하거나 수정하는 등의 내용 조작이 불가능한가? -> x
    - 객체 = 서랍장이라고 한다면 상수로 선언한 객체 = 내장형 서랍장 -> 내장형 서랍장은 위치를 옮기거나 제거하거나 교체할 수 없지만 서랍장 안의 물건은 얼마든지 자유롭게 넣고 뺄 수 있음.
    - 상수로 만든 객체도 객체 자체를 없애지 않는 한, 프로퍼티를 자유롭게 추가하거나 삭제, 수정 가능 
    
    - ex6: 상수로 선언한 객체의 프로퍼티 조작

    const obj = {  // 상수로 객체 선언 
        a: 1,
        b: "text"
    };
    obj.a = 2;
    obj.c = undefined;
    delete obj.b;
    console.log(obj); // 출력: {a: 2, c: undefined}



4. [in 연산자]
    - 객체에 존재하지 않는 프로퍼티에 접근하면 undefined를 반환

    let obj = {
        a: 1
    };
    console.log(obj.b); // 출력: undefined

    - 이러한 객체의 특징을 이용해 특정 프로퍼티의 존재 여부 확인 가능

    let obj = {
        a: 1
    };
    let isPropertyExist = obj.b !== undefined; 
    console.log(isPropertyExist); // 출력:false

    - undeined를 이용해 비교하는 방식도 잘 동작 but, 프로퍼티의 value에는 undefined를 할당하는 경우도 있으므로 완벽한 방법 x
    
    - 객체에서 해당 프로퍼티의 존재 여부를 확인할 때에는 주로 'in 연산자'를 이용

    let person = {
        age: 10
    };
    let isNameExist = "name" in person; 
    console.log(isNameExist); // 출력: false

    - in 연산자 왼쪽에 존재 여부를 확인하려는 프로퍼티의 key를 문자열로 명시하고, 오른쪽에 객체를 명시하면 존재 확인 가능.



5. [메서드]
    - 메서드: 객체에서 값(value)이 함수인 프로퍼티

    let person = {
        name: "정민주",
        sayHi: function () {
            onsole.log("안녕");
        }
    };
    person.sayHi(); // 출력: 안녕

    - 객체 person의 sayHi 프로퍼티는 value가 곧 함수 -> 이 프로퍼티를 특별히 '메서드'라고 함.
    - 메서드는 데이터가 아니라 객체의 동작을 정의