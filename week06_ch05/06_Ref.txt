[Ref]
리액트의 Ref를 이용하면 돔(DOM) 요소들을 직접 조작 가능.
 Ref는 Reference의 줄임말로 참조라는 뜻.

1. [useRef 사용하기]

useRef: 리액트 함수, Ref 객체 생성.

# Body 컴포넌트 수정.
import { useState } from "react";

function Body() {
  const [text, setText] = useState("");

  const handleOnChange = (e) => {
    setText(e.target.value);
  };

  const handleOnClick = () => {
    alert(text);
  };

  return (
    <div>
      <input value={text} onChange={handleOnChange} />
      <button onClick={handleOnClick}>작성 완료</button>
    </div>
  );
}
export default Body;
- State 변수 text로 관리하는 텍스트 입력 폼 하나와 버튼 하나 생성.
- 버튼을 클릭하면 이벤트 핸들러 handleOnClick이 실행되어 입력 폼에서 작성한 텍스트를 메시지 대화상자에 표시.

# Body 컴포넌트 수정.
import { useRef, useState } from "react"; ① 

function Body() {
  const [text, setText] = useState("");
  const textRef = useRef(); ② 

  const handleOnChange = (e) => {
    setText(e.target.value);
  };
  const handleOnClick = () => {
    alert(text);
  };

  return (
    <div>
      <input ref={textRef} value={text} onChange={handleOnChange} /> ③ 
      <button onClick={handleOnClick}>작성 완료</button>
    </div>
  );
}
export default Body;
- ① useRef는 리액트가 제공하는 기능. react 라이브러리에서 불러옴.
- ② 함수 useRef는 인수로 전달하는 값을 초깃값으로 하는 Ref 객체를 생성. 생성한 Ref를 상수 textRef에 저장.
- ③ <input> 태그에서 ref={textRef} 명령으로 textRef가 돔 입력 폼에 접근하도록 설정 -> textRef를 이용하면 입력 폼을 직접 조작 가능.
(저장해도 페이지에서는 아직 아무 변화 x. 입력 폼에 대한 어떤 조작도 아직 시도하지 않았기 때문.)



1-1. [useRef로 입력 폼 초기화하기]

웹 서비스의 로그인 페이지는 대부분 사용자가 ID와 password를 입력하고 로그인 버튼을 클릭하면 패스워드가 올바른지 점검.
그런 다음 패스워드 입력 폼에서 작성한 값을 초기화함.
리액트에서 Ref를 이용하면 이런 동작을 수행 가능.

# Body 컴포넌트 수정: useRef를 이용해 텍스트 입력 폼을 초기화.
import { useRef, useState } from "react";

function Body() {
  (...)
  const handleOnClick = () => {
    alert(text);
    textRef.current.value = "";
  };
  (...)
}
export default Body;
- ① 버튼을 클랙해 이벤트 핸들러 handleOnClick을 실행. 대화상자에서 <확인> 버튼을 클릭하면 textRef.current(textRef가 현재 참고하고 있는 돔 요소)의 value 값을 공백 문자열로 초기화.



1-2. [useRef로 포커스하기]

웹 서비스에서는 사용자가 특정 폼에 내용을 입력하지 않거나 내용이 정한 길이보다 짧으면 해당 폼을 포커스(focus)하여 사용자의 추가 입력을 유도함.
리액트의 Ref 기능을 이용하면 특정 요소에 포커스 기능을 지정 가능.

# Body 컴포넌트 수정: 텍스트 입력 폼에서 사용자가 문자를 다섯 글자 미만으로 입력하면 이 요소에 포커스한 상태로 사용자가 입력을 추가할 때까지 대기.
import { useRef, useState } from "react";

function Body() {
  const [text, setText] = useState("");
  const textRef = useRef();

  const handleOnChange = (e) => {
    setText(e.target.value);
  };

  const handleOnClick = () => {
    if (text.length < 5) {
      textRef.current.focus(); ①
    } else {
      alert(text);
      setText(""); ②
    }
  };

  return (
    <div>
      <input ref={textRef} value={text} onChange={handleOnChange} />
      <button onClick={handleOnClick}>작성 완료</button>
    </div>
  );
}
export default Body;
- ① 현재 <input> 태그로 지정한 폼에 입력한 텍스트가 다섯 글자보다 적다면 textRef.current가 참조하는 입력 폼에 포커스를 실행.
- focus()는 현재 돔 요소에 포커스를 지정하는 메서드
- ② 텍스트 폼에 입력한 값을 초기화하기 위해 set 함수  setText를 호출하고 인수로 빈 문자열을 전달. Ref를 사용하지 않고도 set 함수로 입력 폼을 초기화 가능.

@ 리액트 훅
    리액트 훅(React Hook)이란 함수로 만든 리액트 컴포넌트에서 클래스로 만든 리액트 컴포넌트의 기능을 이용하도록 도와주는 함수들.
    앞서 State를 만드는 함수 useState와 참조 객체를 만드는 함수 useRef는 모두 리액트 훅.
    이 두 함수 모두 이름이 use로 시작하는데, 리액트 훅은 이름 앞에 항상 use를 붙임.
    State와 Ref 모두 원래는 함수로 만든 컴포넌트에서는 사용할 수 없는 기능이지만 이 훅 기능 덕분에 사용 가능.
    리액트에서는 useState와 useRef 외에도 다양한 훅이 있음.(useEffect, useContext, useReducer, useCallback, useMemo...)