[이벤트 처리하기]
이벤트: 웹 페이지에서 일어나는 사용자의 행위. 버튼 클릭, 페이지 스크롤, 새로고침 등.



1. [이벤트 핸들링과 이벤트핸들러]

이벤트 핸들링: 이벤트가 발생하면 특정 코드가 동작하도록 만드는 작업.(ex- 버튼을 클릭했을 때 경고 대화상자를 브라우저에 표시하는 동작.)

ex01: 리액트를 사용하지 않고 HTML과 자바스크립트만으로 이벤트를 핸들링하는 예
<script>
  function handleOnClick() {
    alert("button clicked!");
  }
</script>

<button onclick="handleOnClick()">① 
	Click Me!
</button>
- ① 페이지의 버튼 요소를 클릭하는 이벤트가 발생하면, 함수 handleOnClick을 실행.
- 페이지의 버튼을 클릭하는 이벤트가 발생하면, 함수 handleOnClick을 실행해 경고 대화상자를 페이지에 표시.
- 함수 handleOnClick을 이벤트를 처리하는 함수라는 의미에서 '이벤트 핸들러'라고 함.



2. [리액트의 이벤트 핸들링]

Body 컴포넌트에 버튼을 하나 만들고, 버튼을 클릭하는 이벤트가 발생하면 실행되는 이벤트 핸들러를 작성.

# Body 컴포넌트 수정.
function Body() {
  function handleOnClick() { ①
    alert("버튼을 클릭하셨군요!");
  }

  return (
    <div className="body">
      <button onClick={handleOnClick}>클릭하세요</button> ②
    </div>
  );
}
export default Body;
- ① 함수 handleOnClick을 선언. 이 함수는 이벤트 핸들러로써 "버튼을 클릭하셨군요!"라는 메시지를 담은 대화상자를 띄워 이벤트를 처리.
- ② 버튼을 하나 생성. 이 버튼을 클릭하면 클릭 이벤트를 처리하는 이벤트 핸들러 함수 handleOnClick을 호출한다.

리액트의 이벤트 핸들링은 HTML의 이벤트 핸들링과 흡사하지만, 차이점이 몇 가지 있음.
이벤트 핸들러 표기에서 HTML은 onclick이지만 리액트는 카멜 케이스 문법에 따라 onClick으로 표기.
Props로 전달한 값을 지정할 때처럼 onClick={} 문법으로 이벤트 핸들러를 설정.
이벤트 핸들러를 설정할 때 함수 호출의 결괏값을 전달하는 것이 아니라 콜백 함수처럼 함수 그 자체를 전달.

// HTML, 자바스크립트를 사용할 때의 이벤트 핸들러 설정
<button onclick="handleOnClick()">
Click Me!
</button>

// 리액트를 사용할 때의 이벤트 핸들러 설정
<button onClick={handleOnClick}>클릭하세요</button>

HTML, 자바스크립트에서는 이벤트 핸들러를 설정할 때 함수를 호출하듯 소괄호를 부여 주었음.
그러나 리액트에서는 Props의 값을 설정할 때처럼 소괄호 없이 함수 이름만 명시.



3. [이벤트 객체 사용하기]

리액트에서는 이벤트가 발생하면 이벤트 핸들러에게 이벤트 객체를 매개변수로 전달함.
이벤트 객체에는 이벤트가 어떤 요소에서 어떻게 발생했는지에 관한 정보가 상세히 담겨 있음.

# Body 컴포넌트 수정: 2개의 버튼을 만들고, 이벤트가 발생하면 클릭한 버튼의 이름을 콘솔에 출력.
function Body() {
  function handleOnClick(e) { ①
    console.log(e.target.name);
  }
  return (
    <div className="body">
      <button name="A버튼" onClick={handleOnClick}> ②
        A 버튼
      </button>
      <button name="B버튼" onClick={handleOnClick}> ③
        B 버튼
      </button>
    </div>
  );
}

export default Body;
- ① 버튼 이벤트 핸들러 handleOnClick을 생성. 이 함수는 이벤트 객체(e)를 매개변수에 저장하고, 해당 객체의 target.name 프로퍼티 값을 콘솔에 출력.
- ② A 버튼 생성. 이 버튼의 name 속성은 A버튼. 클릭 이벤트 핸들러로 handleOnClick을 설정.
- ③ B 버튼 생성. 이 버튼의 name 속성은 B버튼. 클릭 이벤트 핸들러로 handleOnClick을 설정.

이벤트 객체의 target 프로퍼티에는 이벤트가 발생한 페이지의 요소(여기서는 버튼)가 저장.
-> A버튼을 클릭하면 e.target에는 A버튼이 저장되고, B버튼을 클릭하면 e.target에는 B버튼이 저장됨.
-> 함수 handleOnClick에서 e.target.name을 콘솔에 출력하면 현재 이벤트가 발생한 요소의 name 속성값을 출력.

이벤트 객체는 이벤트를 처리하는 데 필요한 많은 정보를 담고 있음.
이벤트 객체에 정확히 어떤 값들이 저장되어 있는지 알아보기 위해 Body 컴포넌트에서 작성한 함수 handleOnClick을 다음과 같이 수정.

# Body 컴포넌트 수정.

function Body() {
  function handleOnClick(e) {
    console.log(e); ①
    console.log(e.target.name);
  }
  return (
    <div className="body">
      <button name="A버튼" onClick={handleOnClick}>
        A 버튼
      </button>
      <button name="B버튼" onClick={handleOnClick}>
        B 버튼
      </button>
    </div>
  );
}

export default Body;
- ① 함수 handleOnClick을 실행했을 때 매개변수에 저장되는 이벤트 객체 e를 콘솔에 출력.

콘솔에 출력된 이벤트 객체를 살펴보면 상당히 많은  프로퍼티가 저장되어 있음.
그러난 아주 복잡한 이벤트 처리가 아니라면 실무에서는 대체로 1~2개의 값만 활용하므로 이 값들을 모두 상세히 알 필요X.