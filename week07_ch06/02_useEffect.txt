[useEffect]

함수 useEffect는 어떤 값이 변경될 때마다 특정 코드를 실행하는 리액트 훅.
이를 "특정 값을 검사한다"라고 표현. 
예컨대 useEffect를 이용하면 컴포넌트의 State 값이 바뀔 때마다 변경된 값을 콘솔에 출력하게 할 수 있음.



1. [하나의 값 검사하기]

카운터 앱의 App 컴포넌트에서 State 변수 count의 값이 바뀌면, 변경된 값을 콘솔에 출력할 것.

project1 폴더 열기.

# App.js 수정.
import { useState, useEffect } from "react"; ①
(...)

function App() {
  const [count, setCount] = useState(0);
  const handleSetCount = (value) => {
    setCount(count + value);
  };

  useEffect(() => { ②
    console.log("count 업데이트: ", count);
  }, [count]);

  return (
    <div className="App">
      <h1>Simple Counter</h1>
      <section>
        <Viewer count={count} />
      </section>
      <section>
        <Controller handleSetCount={handleSetCount} />
      </section>
    </div>
  );
}
export default App;
- ① 함수 useEffect를 사용하기 위해 react 라이브러리에서 불러옴.
- ② useEffect를 호출하고 두 개의 인수를 전달. 첫 번째 인수로 콜백 함수를, 두 번째 인수로 배열 전달.

# useEffect의 용법.
useEffect(callback, [deps])
          콜백 함수, 의존성 배열
- 두 번째 인수로 전달한 배열을 의존성 배열(Dependency Array, deps)라고 함.
- useEffect는 이 배열 요소의 값이 변경되면 첫 번째 인수로 전달한 콜백함수를 실행.
- 코드에서 useEffect의 의존성 배열 요소에 State 변수 count가 있으므로, 이 값이 바뀌면 콜백 함수가 실행됨.
- 콜백 함수는 콘솔에 'count 업데이트'라는 문자열과 함께 변경된 State 값을 출력.

# 페이지의 개발자 도구의 콘솔 확인.
'count 업데이트: 0'이 콘솔에 출력됨. 아직 State 값을 변경한 적이 없음에도 콘솔에서 문자열을 출력한 이유는 State 값을 초기화할 때도 useEffect가 이 변화를 감지하기 때문.
<+10> 버튼을 5번 누른 다음 확인 하면 버튼을 클릭할 때마다 useEffect에 인수로 전달한 콜백 함수가 실행되어 변경된 State 값을 콘솔에 출력.



2. [여러 개의 값 검사하기]

useEffect의 의존성 배열 요소가 여러 개 있어도 마찬가지.
즉, 배열 요소 중 하나가 변경되어도 useEffect는 콜백 함수를 실행.

현재 카운터 앱의 App 컴포넌트에는 State 변수 count 외에는 변경할 수 있는 값이 없음.
따라서 임시로 입력 폼을 추가하고, 이 폼에 입력한 데이터를 처리하는 text라는 이름의 State 변수를 하나 더 만들 것.

# App 컴포넌트를 수정.
(...)
function App() {
  const [count, setCount] = useState(0);
  const [text, setText] = useState(""); ①
b
  const handleSetCount = (value) => {
    setCount(count + value);
  };
  const handleChangeText = (e) => { ②
    setText(e.target.value);
  };b

  useEffect(() => {
    console.log("count 업데이트: ", count);
  }, [count]);

  return (
    <div className="App">
      <h1>Simple Counter</h1>
      <section>
        <input value={text} onChange={handleChangeText} /> ③
      </section>b
      <section>
        <Viewer count={count} />
      </section>
      <section>
        <Controller handleSetCount={handleSetCount} />
      </section>
    </div>
  );
}
export default App;
- ① useState를 이용해 State 변수 text를 만듦.
- ② onChange 이벤트 핸들러 함수 handleTextChange를 만듦.
- ③ 새로운 <section> 태그로 페이지의 영역을 나누고, 텍스트 입력 폼을 생성. 사용자 입력을 처리하기 이한 value 속성에 변수 text를 전달하고, onChange 이벤트 핸들러는 함수 handleChangeTex를 지정.

# text 값이 변경되어도 useEffect가 콜백 함수를 실행하도록 App 컴포넌트 수정.
(...)
function App() {
  (..)
  useEffect(() => {
    console.log("업데이트: ", text, count);
  }, [count, text]);
  (..)
}
export default App;
- ① useEffect의 콜백 함수가 실행되면 State 변수 text와 ccount 값을 콘솔에 출력.
- ② useEffect에 전달하는 의존성 배열에 변수 text를 요소로 추가.



3. [useEffect로 라이프 사이클 제어하기]

컴포넌트의 3단계 라이프 사이클 중 업데이트(Update)가 발생하면 특정 코드를 실행.

# App 컴포넌트 수정.
(...)
function App() {
  const [count, setCount] = useState(0);
  const [text, setText] = useState("");

  const handleSetCount = (value) => {
    setCount(count + value);
  };
  const handleChangeText = (e) => {
    setText(e.target.value);
  };

  useEffect(() => { ①
    console.log("컴포넌트 업데이트");
  });
  (..)
}
export default App;
- ① 앞서 작성했던 함수 useEffect 코드는 삭제하고 새롭게 useEffect를 생성. 이때 두번째 인수인 의존성 배열에는 아무것도 전달하지 않음.

두 번째 요소인 의존성 배열에 아무것도 전달하지 않으면, useEffect는 컴포넌트르르 렌더링할 때마다 콜백 함수를 실행.
<+10> 버튼을 2번 누른 다음, 개발자 도구의 콘솔 확인하면 마운트 시점 한 번과 컴포넌트를 리렌더하는 업데이트 시점 두 번에 걸쳐 문자열이 세 번 출력됨.

이번에는 useEffect에서 마운트 시점은 제외하고 업데이트 시점에만 콜백 함수를 실행할 것.
즉, 페이지에 처음 렌더링할 때는 콜백 함수를 실행하지 않고 리렌더될 때만 실행.

# App.js 수정.
import { useRef, useState, useEffect } from "react"; ① 
(...)
function App() {
  (...)
  const didMountRef = useRef(false); ②

  useEffect(() => { ③
    if (!didMountRef.current) {
      didMountRef.current = true;
      return;
    } else {
      console.log("컴포넌트 업데이트!");
    }
  });
  (...)
}
export default App;
- ① useRef를 사용하기 위해 react 라이브러리에서 불러옴.
- ② 현재 App 컴포넌트를 페이지에 마운트했는지 판단하는 변수 didMountRef를 Ref 객체로 생성. 초깃값으로 false를 설정. Ref 객체는 돔 요소를 참조하는 것뿐만 아니라 컴포넌트의 변수로도 자주 활용.
- ③ 컴포넌트 마운트 시점에는 콘솔에 '컴포넌트 업데이트' 문자열을 출력하지 않도록 조건문을 추가.

# useEffect의 콜백 함수에 조건문 추가 코드 살펴보기.
useEffect(() => { ①
    if (!didMountRef.current) { ②
      didMountRef.current = true;
      return;
    } else { ③
      console.log("컴포넌트 업데이트!");
    }
});
- ① 의존성 배열로 아무것도 전달하지 않았으므로, 콜백 함수는 마운트 시점에도 실행되어야 함.
- ② 조건문에서 변수 didMountRef의 값을 검사. 이 변수는 컴포넌트가 마운트했는지 아닌지 판단할 때 사용하는데, 초깃값으로 false를 설정했으므로 콜백 함수를 처음 렌더링하는 마운트 시점에는 조건식이 참(!false=true)이 되어 if문을 수행함. if문에서는 변수 didMountRef의 값을 true로 바꾸고(마운트가 됐음으르 표시), return 문으로 함수를 종료함.
- ③ 변수 didMount의 값이 false가 아니라면(true라면), 콜백 함수의 호출은 마운트 시점이 아니므로 콘솔에서 '컴포넌트 업데이트' 문자열을 출력.

@ 정리
useEffect에서 의존성 배열을 인수로 전달하지 않으면 마운트, 업데이트 시점 모두 콜백 함수를 호출.
콜백 함수 내부에서 조건문과 Ref 객체로 특정 시점에만 코드를 실행하게 만들 수 있음.
마운트 시점(didMountRef=false)에 호출하면 아무것도 출력하지 않고 함수를 종료하고, 업데이트 시점(didMountRef=true)에 호출하면 문자열을 콘솔에 출력.



4. [컴포넌트의 마운트 제어하기]

컴포넌트의 마운트 시점에 실행되는 코드를 작성할 것.
이르 "컴포넌트의 마운트를 제어한다"라고 표현.

# App 컴포넌트 수정.
(...)
function App() {
  (...)
  const didMountRef = useRef(false); 

  useEffect(() => { 
    if (!didMountRef.current) {
      didMountRef.current = true;
      return;
    } else {
      console.log("컴포넌트 업데이트!");
    }
  });

  useEffect(() => { ①
    console.log("컴포넌트 마운트");
  }, []);

	return (
	  (...)
	);
}
export default App;
- ① 함수 useEffect를 하나 더 만들고 의존성 배열에는 빈 배열을 전달. useEffect에서 빈 배열을 전달하면 컴포넌트의 마운트 시점에만 콜백 함수를 실행.



5. [컴포넌트 언마운트 제어하기]

라이프 사이클의 마지막 단계인 언마운트는 컴포넌트가 페이지에서 제거될 때. 
컴포넌트 언마운트 시점에 필요한 코드 실행 방법을 살펴볼 것.



5-1. [클린업]

리액트 컴포넌트의 언마운트 시점을 제어하기 위해서는 먼저 클린업(Cleanup) 기능을 이해해야 함.
클린업: 원래 '청소'라는 뜻. 프로그래밍에서 이 개념은 특정 함수가 실행되고 종료된 후에, 미처 정리하지 못한 사항을 처리하는 일.

# App 컴포넌트에서 다음과 같이 함수 useEffect를 한 번 더 호출.
(...)
function App() {
  (...)
  useEffect(() => { ①
    setInterval(() => { ②
      console.log("깜빡");
    }, 1000);
  });
	(...)
}
export default App;
- ① useEffect를 호출하고 의존성 배열은 전달하지 않음. 따라서 App 컴포넌트를 렌더링할 때마다 다 첫 번째 인수로 전달한 콜백 함수가 실행됨.
- ② useEffect의 콜백 함수는 다시 함수 setInterval을 호출함. setInterval은 자바스크립트 내장 함수로 두 번재 인수인 밀리초 시간이 경과하면 첫 번째 인수로 전달한 콜백 함수를 실행함. 즉, 인터벌(Interval, 시간 간격)을 설정하는 함수. 결과적으로 1초마다 콘솔에 문자열 깜빡을 출력함.

저장 후, 페이지의 개발자 도구의 콘솔을 확인하면 1초마다 문자열 깜빡이 출력됨.
페이지에서 <+1> 또는 <-1> 버튼으르 빠른 속도로 연속 클릭함. 빠르게 연속 클릭해 State(count) 값을 변경하면, App 컴포넌트가 여러 번 리렌더됨.
-> 함수 setInterval에서 정한 인터벌(1초)이 아닌 매우 빠른 속도로 '깜빡' 문자열이 콘솔에 출력됨.
분명 1초마다 '깜빡'을 콘솔에 출력하도록 인터벌을 정했는데 갑자기 빠르게 출력하는 이유가  무엇일까? 두가지 이유가 복합적으로 얽혀 있음.

하나는 App 컴포넌트를 렌더링할 때마다 useEffect의 콜백 함수는 새로운 setInterval 함수를 만들고 새 인터벌 간격을 생성.
useEffect의 두 번째 인수로 아무것도 전달하지 않았기때문에 버튼을 클릭해 State를 변경하면 새 인터벌 함수를 생성함.

다른 하나는 함수 setInterval에서 인터벌을 생성한 다음에 이를 종료하지 않았기 때문. 
인터벌을 종료하는 clearInterval이라는 또 다른 내장 함수를 호출하지 않으면 문자열 출력은 멈추지 않음.

버튼을 클릭해 State 값을 업데이트하면 App 컴포넌트를 리렌더할 때마다 새로운 인터벌이 생성됨.
그러나 기존 인터벌을 종료하지 않았기 때문에 여러 개의 인터벌이 중복으로 만들어져 출력 속도가 빨라지게 됨.
이럴 때 사용하는 기능이 바로 useEffect의 클린업 기능.

# useEffect 수정.
(...)
function App() {
  (...)
  useEffect(() => { 
    const intervalID = setInterval(() => { ①
      console.log("깜빡");
    }, 1000);
    return () => { ②
      console.log("클린업");
      clearInterval(intervalID); ③
    };
  });
	(...)
}
export default App;
- ① 함수 setIntervval은 새 인터벌으르 생성하면 인터벌 식별자(id)를 반환. 이 id를 변수 intervalID에 저장.  
- ② useEffect에 인수로 전달한 콜백 함수가 새 함수를 반환하도록 함. 이 함수는 클린업 함수로서 useEffect의 콜백 함수가 실행되기 전이나 컴포넌트가 언마운트하는 시점에 실행됨.
- ③ 클린업 함수는 clearInterval을 호출. 인수로 ①에서 생성한 인터벌 식별자를 전달해 앞서 생성한 인터벌을 삭제.

@ 정리.
useEffect의 콜백 함수가 반환하는 함수를 클립업 함수라 함.
이 함수는 콜백 함수를 다시 호출하기 전에 실행됨.
따라서 컴포넌트를 렌더링할 때마다 새 인터벌을 생성하고 기존 인터벌을 삭제함.
이제 클린업 기능을 이용해 남아 있는 작업을 청소해서 <+1>이나 <-1>을 빠르게 클릭해도 인터벌이 중복해서 만들어지지 x.



5-2. [클린업을 이용해 컴포넌트 언마운트 제어하기]

컴포넌트 언마운트: 컴포넌트가 페이지에서 사라질 때 원하는 코드를 실행.

현재 카운터 앱은 페이지에 렌더링한 컴포넌트를 사라지게 하는 기능이 없기 때문에 언마운트를 제어할 수 없으므로 새 컴포넌트 생성.
이 컴포넌트는 count 값이 짝수면 특정 문자열을 페이지에 렌더링함.(이 기능을 조건부 렌더링으로 구현.)

# component 폴더에 Even.js 만들고 작성.
function Even() {
  return <div>현재 카운트는 짝수입니다</div>;
}
export default Even;

# App.js 수정: Count 값이 짝수일 때 Even 컴포넌트를 페이지에 렌더링.
(...)
import Even from "./component/Even"; ①

function App() {
  (...)
  return (
    <div className="App">
      (...)
      <section>
        <Viewer count={count} />
        {count % 2 === 0 && <Even />} ②
      </section>
      (...)
    </div>
  );
}
export default App;
- ① component 폴더의 Even.js에서 Even 컴포넌트를 불러옴.
- ② AND 단축 평가를 이용해 count 값을 2로 나눈 나머지가 0일 때, 즉 State 값이 짝수일 때 Even 컴포넌트를 페이지에 렌더링.

AND 단축 평가를 이용하면 조건부 렌더링 코드를 간결하게 작성 가능.
예컨대 count % 2 === 0 && <Even/>과 같은 코드에서 AND 연산자 앞의 식이 참이면 연산자 뒤의 Even 컴포넌트를 값으로 반환.
만약 count % 2 === 0의 값이 거짓(false)이면 단축 평가가 이루어져 페이지에는 아무것도 렌더링하지 않음.

# Even.js 수정: useEffect를 사용해 Even 컴포넌트가 언마운트될 때 콘솔에 특정 문자열을 출력.
import { useEffect } from "react";

function Even() {
  useEffect(() => { ①
    return () => {
      console.log("Even 컴포넌트 언마운트");
    };
  }, []);

  return <div>현재 카운트는 짝수입니다</div>;
}
export default Even;
- ① useEffect를 호출하고 의존성 배열로 빈 배열을 전달합니다. 그다음 콜백 함수가 화살표 함수를 반환하게 함.

함수 useEffect에 의존성 배열로 빈 배열을 전달하고 콜백 함수가 함수를 반환하면 이 함수는 컴포넌트의 언마운트 시점에 실행됨.

<+1> 버튼을 클릭해 개발자 도구의 콘솔을 확인하면 State 변수 count의 초깃값은 0(짝수)이므로 App의 마운트 시점에 Even 컴포넌트 역시 마운트됨.
이 상태에서 <+1> 버튼을 클릭하면 State 값이 1(홀수)로 변경되므로 Even 컴포넌트를 언마운트하면서 콘솔에 Even 컴포넌트 언마운트라는 문자열을 출력함.