[Node.js 패키지]

복잡한 프로그램을 만들기 위해서는 여러 개의 자바스크립트 파일이 필요.
왜 여러 개의 파일이 필요?
-> 여러 복잡한 기능을 구현하는 코드를 파일 하나에 모두 작성한다면 코드 길이가 너무 길어짐.
따라서 일반적으로 복잡한 프로그램을 구현할 때는 기능별로 파일을 나누어 작성.

하나의 프로젝트에서 여러 자바스크립트 파일을 Node.js를 이용해 실행할 때는 패키지(Package) 형태로 구성.
패키지는 Node.js에서 여러 개의 자바스크립트 파일을 실행하고 관리하는 일종의 관리 단위.

1. [패키지 만들기]

Node.js 패키지는 여러 파일을 마치 하나의 파일처럼 다룰 수 있게 해주는 관리 단위.
패키지 단위로 여러 파일을 관리하려면 최상위 폴더인 '루트 폴더' 필요.

패키지를 생성하려면 npm을 이용해야 함.
npm은 Node Package Manager의 약자로, Node.js 패키지를 관리하는 도구.
npm에서 패키지를 관리하기 위한 유요하고 간편한 명령어와 기능들을 제공.

터미널에서 다음 명령어를 입력.
-> npm init
- Node.js 패키지를 초기화하는 명령어.
- 초기화란 Node.js 패키지를 구성하는 데 필요한 최소한의 구성 요소를 자동으로 생성하는 과정.
- npm init를 실행하면 패키지 이름을 입력하라는 프로프트 나타남.

패키지 이름을 입력하고 나면 버전, 설명 등의 패키지 구성에 필요한 사항을 계속 물어봄.
어떤 텍스트도 입력하지 않고 모든 물음에 엔터 키를 누름.
구성을 완료하면 Is This OK? 라는 문구와 함께 속성들을 보여줌.
yes를 입력하고 엔터를 눌러 패키지 초기화를 완료.

패키지 구성이 완료되면 비주얼 스튜디오 코드 탐색기 창 루트 폴더 아래에 package.json이라는 파일이 생성됨.
초기화된 패키지의 package.json에는 기본적으로 다음 항목들이 존재.
- name: 패키지 이름.
- version: 패키지 버전.
- description: 패키지 설명.(보통 패키지로 구성한 프로그램의 목적을 작성)
- main: 패키지의 소스 코드 파일 중 메인 역할을 담당하는 소스 코드 파일.
- scripts: 패키지를 쉽게 다루기 위해 지정한 매크로 명령어.
- author: 패키지를 만든 사람.
- license: 패키지의 라이선스.

이렇듯 package.json은 패키지의 메타 정보를 저장하는 파일.
Node.js는 package.json에서 패키지 정보를 확인하여 적절한 방식으로 프로그램을 가동.


2. [패키지 스크립트 사용하기]

Node.js 패키지의 package.json에는 scripts라는 항목이 있음.
이 scripts 항목은 복잡한 명령어를 간단한 명령어로 변경하는 일종의 매크로 기능을 지원.

이러한 scripts 항목을 직접 수정하고 사용해보자.

현재 패키지의 루트 폴더 아래에 index.js라는 파일을 생성하고 다음과 같이 코드를 작성.
console.log("index run");

현재 루트 폴더의 파일 구성은 다음과 같아야 함.
chapter3
  - index.js
  - package.json
  - sample.js

작성한 index.js를 실행하기 위해서는 node 명령어와 함께 경로를 명시해야 함.
그러나 package.json의 scripts 항목을 이용하면 아주 간단하게 index.js를 실행 가능.

package.json의 scripts 항목을 다음과 같이 수정.
{
  (...)
  "scripts": {
  "start": "node index.js",
  "test": "echo \"Error: no test specified\" && exit 1"
  },
  (...)
}

원래는 앞서 작성한 index.js 파일을 실행하려면 터미널에서 node ./index.js라고 입력해야 함.
그러나 간단하게 명령을 내릴 수 있도록 package.json의 scripts 항목에 start를 새롭게 추가함.
다음 명령어를 터미널에서 입력.
npm run start

npm run 명령은 뒤에 나오는 스크립트를 실행.
즉, npm run start를 입력하면 package.json에 기록한 scripts에서 일치하는 명령어를 찾아 실행.
start 항목에 node index.js라고 지정했기 때문에 해당 명령어를 실행.

index.js가 실행되어 터미널에 문자열 index run을 출력.