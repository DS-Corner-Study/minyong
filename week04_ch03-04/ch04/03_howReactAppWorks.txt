[리액트 앱의 동작 원리]

1. [리액트 앱에는 어떻게 접속하는 걸까?]

앞서 create-react-app으로 리액트 앱을 만들고 npm run start 명령으로 앱을 구동해 봄.
그 결과 리액트 앱을 실행하면 http://localhost:3000으로 접속한다는 사실을 알게 됨.

그렇다면 어떤 원리로 리액트 앱에 접속하는 걸까?
결론부터 말하자면 Create React App으로 만든 리액트 앱에는 웹 서버가 내장되어 있음.
즉, npm run start 명령을 실행하면 브라우저가 리액트 앱에 접속하도록 앱에 내장된 웹 서버가 동작.
결국 내장된 웹 서버 주소로 브라우저가 자동으로 접속.

(웹 서버는 브라우저의 요청에 따라 필요한 웹 페이지를 보내주는 컴퓨터. 예를 들어 네이버 웹 서버는 사람들이 접속할 수 있는 http://naver.com이라는 주소를 갖고 있음. 해당 주소로 접속 요청이 들어오면 웹 서버에서 네이버의 웹 페이지를 보내줌.)

네이버 웹 서버에 접속하려면 https://naver.com이라는 주소를 입력하듯이 웹 서버에는 자신만의 주소가 있음.
Create React App으로 생성한 리액트 앱의 주소는 기본적으로 http://localhost:3000으로 설정되어 있음.
그러므로 이 주소로 요청 해야 앞에서 생성한 리액트 앱에 접속할 수 있음.

그렇다면 localhost:3000이라는 주소는 어떤 의미일까?
먼저 localhost는 내 컴퓨터의 주소를 가리킴.
따라서 localhost 주소로 무언가를 요청하면, 해당 요청은 사용자의 컴퓨터에 전달됨.
이것은 마치 우체국에 가서 본인의 집 주소로 편지를 보내는 것과 같은 원리.

localhost 뒤에 콜론(:)과 함께 나오는 3000은 포트(port) 번호.
포트 번호는 컴퓨터에서 실행되고 있는 서버를 구분하는 번호.
컴퓨터에는 기본적으로는 하나의 주소가 있는데, 이 주소로 요청을 받음.
그런데 컴퓨터에 여러 개의 서버가 실행되고 있다면, 요청을 받았을 때 어떤 서버에 대한 요청인지 모호할 수 있음.
따라서 서버별로 포트 번호를 정해놓으면, 해당 포트 번호에 대한 요청이 들어올 때만 응답하는 식으로 작업을 선별해 처리할 수 있음.

Create React App으로 만든 리액트 앱의 기본 포트 번호는 3000번.
따라서 http://localhost:3000과 같이 localhost 3000번 포트의 서버로 접속을 요청해야 정상 적으로 리액트 앱에 접속할 수 있음.

결국 npm run start 명령으로 리액트 앱을 실행하면 내장된 웹 서버가 실행되면서 http://localhost:3000 주소로 접속하게 됨.



2. [리액트 앱의 동작 원리 상세 보기]

리액트 앱을 실행하고 http://localhost:3000 주소로 접속하면 앞에서 살펴보았듯이 애니메이션처럼 움직이는 리액트 로고 페이지가 나옴.
이 페이지 하단에는 “Edit src/App.js and save to reload”라는 문장이 있는데, src 폴더의 App.js를 수정하고 저장하여 다시 로드하라는 뜻.

비주얼 스튜디오 코드에서 src 폴더의 App.js를 열어보면 App 함수가 작성되어 있음.
이 함수의 return 문을 다음과 같이 수정하고 <Ctrl>+<S>로 저장.

#src/App.js

import logo from "./logo.svg";
import "./App.css";
function App() {
  return (
    <div className="App">
      <h2>안녕하세요</h2>
    </div>
  );
}
export default App;
- 이제 페이지의 렌더링 결과가 달라짐.

함수 App처럼 HTML을 반환하는 자바스크립트 함수를 컴포넌트라고 했음.
컴포넌트는 이름과 함께 부르기 때문에 이제부터 App 컴포넌트라고 함.

사용자가 주소 http://localhost:3000으로 리액트 앱에 대한 서비스를 요청하면, 리액트 앱 서버는 우선 웹 페이지 파일인 public 폴더의 index.html을 보냄.
일반적으로 특정 웹 서비스에 접속하면 처음 만나는 페이지는 대체로 index.html 파일.

index.html을 열어 실제 페이지를 브라우저에 표시하는 <body> 태그를 확인.

#public/index.html

(...)
<body>
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root"></div>
  (...) 
(...)
</body>
- 그러나 index.html의 <body> 태그에는 브라우저가 자바스크립트를 실행할 수 없을 때만 나타나는 <noscript> 태그와 id가 root인 빈 <div> 태그밖에 없음.
- 따라서 index.html에는 페이지에 표시할 만한 요소가 하나도 없음.

뭔가 이상. 분명 index.html에는 페이지에 표시할 만한 요소가 하나도 없는데, http://localhost:3000으로 리액트 앱에 접속하면 앞서 App 컴포넌트에서 수정했던 내용을 페이지가 표시하기 때문.

이를 이해하려면 개발자 도구 [Element] 탭에서 <head> 태그에 작성된 <script defer src=".../bundle.js"> 태그를 확인.
개발자 도구의 [Element] 탭에서 이 태그를 찾아 클릭.
개발자 도구를 열어 <head> 태그의 <script> 태그 확인.
<script>는 리액트 앱에 접속하면 자동으로 index.html에 추가되는 태그.
<script> 태그는 ‘/static/js/’ 경로에 있는 bundle.js라는 자바스크립트 파일을 불러와 실행.

(bundle은 꾸러미, 묶음이라는 뜻. bundle.js는 src 폴더에 있는 자바스크립트 파일을 한데 묶어놓은 파일. 이렇게 여러 자바스크립트 파일을 하나로 묶는 작업을 번들링이라고 하며, 그 결과물인 bundle.js가 번들 파일.)

bundle.js는 src 폴더에 있는 index.js와 이 파일이 불러온 모듈을 하나로 묶어놓은 파일.
결국 이 번들 파일은 index.js가 작성한 코드에 따라 동작.
따라서 index.js에 어떤 내용이 있는지 살펴봐야 리액트 앱의 동작을 제대로 이해할 수 있음.

index.js에는 다음과 같은 코드가 작성되어 있음.

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

- import 문: index.js에서는 import 문으로 App.js에 있는 App 컴포넌트를 포함해 여러 개의 모듈을 불러옴.

- ReactDom.createRoot 메서드: ReactDOM.createRoot는 인수로 전달된 요소를 리액트 앱의 루트로 만들어 반환하는 메서드. 
- 여기서 루트란 뿌리라는 뜻이며, 트리 형태의 돔에서 자바스크립트 함수로 작성된 컴포넌트들의 루트 요소를 가리킴.
- ReactDOM.createRoot 메서드에 인수로 document.getElementById('root')를 전달하는데, 이 메서드는 돔에서 id가 ‘root’인 요소를 찾아 반환.
- 이 코드의 의미를 다시 정리하면 돔에서 id가 ‘root’인 요소를 루트로 만들어 root 라는 변수에 저장함.
- id가 root인 요소는 이미 앞에서 살펴보았음. 바로 public 폴더의 index.html에 있는 <div> 태그가 바로 루트 요소임.

- root.render 메서드: 변수 root에는 현재 리액트의 루트가 저장되어 있음. 
- render 메서드는 인수로 리액트 컴포넌트를 전달하는데, 이 컴포넌트를 돔 루트에 추가.
- 따라서 render 메서드가 수행되면 전달된 리액트 컴포넌트가 돔에 추가되어 페이지에 나타남.
- 결론적으로 이 코드는 App 컴포넌트를 돔 루트에 추가하므로, 페이지에 App 컴포넌트에서 정의한 HTML 요소가 표시됨.
- http://localhost:3000에서 개발자 도구를 열고, [Elements] 탭에서 리액트의 루트 요소로 사용된 
<div id='root'>를 클릭하면, 해당 요소 아래에 App 컴포넌트가 반환하는 HTML 요소가 추가되어 있음을 확인할 수 있음.


지금까지 리액트 앱의 동작 원리를 살펴보았음. 
리액트 앱의 동작 방식을 다시 한번 정리하면 다음과 같음.

- 1. localhost:3000으로 접속을 요청하면 public 폴더의 Index.html을 반환.
- 2. index.html에는 src 폴더의 index.js와 해당 파일이 가져오는 자바스크립트 파일을 한데 묶어 놓은 bundle.js를 불러옴. <script> 태그에서 자동으로 추가함.
- 3. bundle.js가 실행되어 index.js에서 작성한 코드가 실행됨.
- 4. Index.js는 ReactDOM.createRoot 메서드로 돔에서 리액트 앱의 루트가 될 요소를 지정함.
- 5. render 메서드를 사용해 돔의 루트 아래에 자식 컴포넌트를 추가합니다. 결과적으로 App 컴포넌트가 렌더링됨.