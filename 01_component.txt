[컴포넌트]
리액트는 컴포넌트 기반의 UI 라이브러리(COmponent-Based UI Library).
페이지의 모든 요소를 컴포넌트 단위로 쪼개어 개발하고, 완성된 컴포넌트를 마치 레고 조립하듯이 합쳐 페이지를 구성.
리액트로 웹 서비스를 개발할 때는 컴포넌트를 여러 개 만들어 이를 적절히 조합해서 만들곤 함.



1. [실습 환경 설정하기]
5장에서 사용할 새 리액트 앱 만들 것.
실습 환경 구축은 4장에서 Create React App으로 chapter4 리액트 앱을 생성했던 방법과 동일.



1-1. [리액트 앱 만들기]
문서(Documents) 폴더 아래에 chapter5 폴더를 만든 다음 비주얼 스튜디오 코드에서 생성한 폴더를 열음.
단축키 <Ctrl>+<J>를 눌러 터미널을 열고, 다음 명령어로 새로운 리액트 앱을 만듦.
npx create-react-app .



1-2. [사용하지 않는 파일 삭제하기]
src/App.test.js
src/logo.svg
src/reportWebVitals.js 
src/setupTest.js
위 파일은 실습에 사용하지 않을 예정이므로 삭제.



1-3. [사용하지 않을 코드 삭제하기]
import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import App from "./App";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<App />);
위와 같이 index.js 코드에서 사용하지 않을 코드 삭제.

import "./App.css";

function App() {
  return <div className="App"></div>;
}

export default App;
위와 같이 App.js 코드에서 사용하지 않을 코드 삭제.



2. [첫 컴포넌트 만들기]
리액트 컴포넌트는 주로 자바스크립트의 클래스나 함수를 이용해 만듦.
함수로 컴포넌트를 만들 것을 권장.



2-1. [함수 컴포넌트 만들기]

import "./App.css";

function Header() { ①
  return (
    <header>
      <h1>header</h1>
    </header>
  ); ②
}

function App() {
  return <div className="App"></div>;
}

export default App;
- ① 함수를 이용해 Header라는 이름의 컴포넌트를 App 컴포넌트 밖에서 만듦.
- ② Header 컴포넌트는 HTML을 반환합니다. 여러 줄로 이루어진 HTML을 반환할 때는 return 문에서 반환할 HTML을 소괄호로 감싼 다음 세미콜론(;)을 꼭 붙여 주어야 함.


import "./App.css";

const Header = () => { ①
  return (
    <header>
      <h1>header</h1>
    </header>
  );
};

function App() {
  return <div className="App"></div>;
}

export default App;
- 화살표 함수로도 컴포넌트를 만들 수 있음.



2-2. [컴포넌트를 페이지에 렌더링하기]
Header 컴포넌트를 페이지에 렌더링하려면 App에서 이 컴포넌트를 자식 요소로 배치해야 함.

import "./App.css";

const Header = () => {
  (...)
};

function App() {
  return (
    <div className="App">
      <Header /> ①
    </div>
  );
}
export default App;
- ① App의 return 문에서 Header 컴포넌트를 마치 HTML처럼 태그로 감싸 작성.

App처럼 다른 컴포넌트를 return 문 내부에 포함하는 컴포넌트를 ‘부모 컴포넌트’.
반대로 Header 처럼 App의 return 문에 포함된 컴포넌트를 ‘자식 컴포넌트’.
부모의 return 문에 자식을 포함하는 행위를 “자식 컴포넌트를 배치한다”라고 표현.



3. [컴포넌트의 계층 구조]

import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import App from "./App";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<App />); ①
- ① 리액트의 루트 요소 아래에 App 컴포넌트를 배치해 렌더링.

index.js를 보면 페이지에 렌더링하는 컴포넌트는 App 하나뿐.
새로운 컴포넌트를 페이지에 렌더링하려면 이 컴포넌트를 App의 자식으로 배치.
단지 컴포넌트를 생성한다고 해서 바로 페이지에 렌더링하지는 않음.

리액트에서 부모는 자식 컴포넌트의 모든 HTML을 함께 반환.
예컨대 chapter5 앱이라면 App는 Header 컴포넌트의 HTML도 함께 반환.
따라서 Header를 자식으로 배치한 App 컴포넌트의 예는 HTML로 작성한 다음 코드와 의미상으로 동일.
import "./App.css";

function App() {
  return (
    <div className="App">
      <header> ①
        <h1>header</h1>
      </header>
    </div>
  );
}

export default App;
- ① 자식 컴포넌트 Header의 반환값과 동일한 HTML 코드.

리액트 컴포넌트는 부모-자식관계라는 계층 구조를 형성.
컴포넌트의 계층 구조를 다른 말로 ‘컴포넌트 트리’라고 함. 
컴포넌트 트리에서 App는 항상 최상위에 존재하므로 이를 루트 컴포넌트라고 부름.



4. [컴포넌트별로 파일 분리하기]
리액트에서는 보통 하나의 파일에 하나의 컴포넌트를 만듦.
하나의 파일에 여러 컴포넌트를 만들면 코드의 가독성이 떨어지기 때문.