[프로젝트 준비하기]
'카운터'앱은 숫자를 더하고 빼는 기능만 있는 아주 단순한 앱.

프로젝트 구현 전 이 앱을 어떤 설계와 기능으로 구현할지 살펴보는 일 필요.
이를 소프트웨터 공학에서 '요구사항 분석'이라 함. 이는 마치 요리 시작 전 레시피를 점검하는 일과 비슷. 요구사항 분석 없이 프로젝트 구현하면 중간에 코드를 다시 작성하는 일 발생 가능하므로 반드시 할 것.



1. [요구사항 분석하기]

'카운터' 앱:
    하나의 페이지. 'Simple Counter'라고 적힌 제목 제외 두 개의 영역.
    첫 번째 영역: 현재의 카운트 표시. 해당 영역의 이름을 'Viewer'라고 할 것.
    두 번째 영역: 카운트를 늘리거나 줄일 수 있는 6개의 버튼. 카운트 제어하는 영역-> 'Controller'라고 할 것.



1-1. [컴포넌트 단위로 생각하기]

리액트에서 앱을 구현할 때는 컴포넌트 단위로 생각하는 것 필요.
Viewer, Controller 영역을 일종의 컴포넌트라고 생각.

'카운터' 앱의 컴포넌트 3가지:
    App 컴포넌트: Viewer와 Controller 컴포넌트를 감싸는 템플릿.
    Viewer 컴포넌트: 현재의 카운트를 표시.
    Controller 컴포넌트: 카운트를 제어할 수 있는 기능을 제공.

하나의 페이지에 하나의 컴포넌트를 구성해도 문제 x.
그러나 하나의 컴포넌트가 여러 기능을 갖게 되면 코드가 복잡해져 프로젝트 과린 어렵.
-> 컴포넌트는 재사용이 가능한 수준에서 최대한 잘게 쪼개어 개발하는 것이 필요.
재사용이 가능한 지에 대한 기준: "하나의 컴포넌트는 단 하나의 역할만 수행"



1-2. [리액트 앱 만들기]

리액트 앱을 생성하는 방법은 chapter5와 동일.

문서 폴더 아래 project1 폴더를 만듦 -> vscode에서 열음. -> 터미널을 열고 "npx create-react-app ." 명령어를 입력해 리액트 앱 생성.
chapter5 앱을 만들 때와 동일하게 사용하지 않는 파일과 코드 삭제.
"npm run start" 명령어를 입력해 리액트 앱 시작.